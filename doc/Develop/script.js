var generateBtn = document.querySelector("#generate");

function generatePassword() {
  //The first step is to take an integer value from the user.
  console.log("Password generation started!")
  var Password = []
  var passLength = prompt("How many characters would you like the password to contain? Enter an integer between 8 and 128");
  var passLengthInt = parseInt(passLength.replace(/\D/g,''), 10); //Honestly I don't know exactly why this works but it gives me an integer or NaN and that's enough
  console.log(passLengthInt);
  if (passLengthInt < 8 || passLengthInt > 128 || isNaN(passLengthInt)) {
    alert("Please enter a valid length!");
    generatePassword();
  }
  //Then I generate an empty Password array that's of the length the user just provided
  for (let i = 0; i < passLengthInt; i++ ) {
    Password.push("");
  }
  console.log(Password)

  //Now we're generating a small array that holds the answers to the next three prompts. If they are all no the user is prompted to answer them again.
  function passwordContents() {
    var lowercase = confirm("Would you like to use lowercase letters?");
    var uppercase = confirm("Would you like to use uppercase letters?");
    var specialChars = confirm("Would you like to use special characters?");

    if (lowercase === false && uppercase === false && specialChars === false) {
      alert("Please choose at least one thing to fill the password with!");
      passwordContents(); 
    }
  return[lowercase, uppercase, specialChars]
  }
  const Contents = passwordContents()

  // This function uses our Contents array to make a new, much larger, array with every possible character that could go in our Password
  function passwordFill() {
    var possibleValues = '';
    if (Contents[0]) {
      possibleValues += 'abcdefghijklmnopqrstuvwxyz';
    }
    if (Contents[1]) {
      possibleValues += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    }
    if (Contents[2]) {
      possibleValues += '!~@#$%^&*()<>?+=[]{}';
    }
    possibleValues = possibleValues.split("")
    console.log(possibleValues)
    return possibleValues
  }
  const Filler = passwordFill()

  //Finally we actually fill the password array with the options generated by passwordFill
  for (let j = 0; j < passLengthInt; j++) {
    Password[j] = Filler[Math.floor(Math.random()*Filler.length)];
  }

  //Now we just return the Password array joined together with no seperating values! It's done!
  return Password.join("")
}

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector("#password");

  passwordText.value = password;

}

// Add event listener to generate button
generateBtn.addEventListener("click", writePassword);
